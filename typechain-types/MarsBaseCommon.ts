/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import {FunctionFragment, Result, EventFragment} from "@ethersproject/abi";
import {Listener, Provider} from "@ethersproject/providers";
import {TypedEventFilter, TypedEvent, TypedListener, OnEvent} from "./common";

export declare namespace MarsBaseCommon {
  export type MBOfferStruct = {
    active: boolean;
    offerType: BigNumberish;
    offerId: BigNumberish;
    amountAlice: BigNumberish;
    feeAlice: BigNumberish;
    feeBob: BigNumberish;
    smallestChunkSize: BigNumberish;
    minimumSize: BigNumberish;
    deadline: BigNumberish;
    amountRemaining: BigNumberish;
    offerer: string;
    payoutAddress: string;
    tokenAlice: string;
    capabilities: boolean[];
    amountBob: BigNumberish[];
    minimumOrderAmountsAlice: BigNumberish[];
    minimumOrderAmountsBob: BigNumberish[];
    minimumOrderAddresses: string[];
    minimumOrderTokens: string[];
    tokenBob: string[];
  };

  export type MBOfferStructOutput = [
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    active: boolean;
    offerType: number;
    offerId: BigNumber;
    amountAlice: BigNumber;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    minimumSize: BigNumber;
    deadline: BigNumber;
    amountRemaining: BigNumber;
    offerer: string;
    payoutAddress: string;
    tokenAlice: string;
    capabilities: boolean[];
    amountBob: BigNumber[];
    minimumOrderAmountsAlice: BigNumber[];
    minimumOrderAmountsBob: BigNumber[];
    minimumOrderAddresses: string[];
    minimumOrderTokens: string[];
    tokenBob: string[];
  };

  export type OfferParamsStruct = {
    cancelEnabled: boolean;
    modifyEnabled: boolean;
    holdTokens: boolean;
    feeAlice: BigNumberish;
    feeBob: BigNumberish;
    smallestChunkSize: BigNumberish;
    deadline: BigNumberish;
    minimumSize: BigNumberish;
  };

  export type OfferParamsStructOutput = [
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    cancelEnabled: boolean;
    modifyEnabled: boolean;
    holdTokens: boolean;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    deadline: BigNumber;
    minimumSize: BigNumber;
  };
}

export interface MarsBaseCommonInterface extends utils.Interface {
  contractName: "MarsBaseCommon";
  functions: {
    "contractType(uint8)": FunctionFragment;
    "getOfferType(uint256,(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "initOffer(uint256,address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "price(uint256,uint256,uint256)": FunctionFragment;
    "setOfferProperties((bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[],uint256[],uint256[],uint256[],address[],address[],address[]),(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contractType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferType",
    values: [BigNumberish, MarsBaseCommon.OfferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initOffer",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish,
      BigNumberish[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferProperties",
    values: [MarsBaseCommon.MBOfferStruct, MarsBaseCommon.OfferParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOfferProperties",
    data: BytesLike
  ): Result;

  events: {
    "BidCancelled(uint256,address,uint256)": EventFragment;
    "Log(uint256)": EventFragment;
    "OfferAccepted(uint256,address,uint256,uint256,uint256,address,uint8)": EventFragment;
    "OfferCancelled(uint256,address,uint256,uint8)": EventFragment;
    "OfferCreated(uint256,address,uint256,tuple)": EventFragment;
    "OfferModified(uint256,address,uint256,tuple,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferModified"): EventFragment;
}

export type BidCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  {offerId: BigNumber; sender: string; blockTimestamp: BigNumber}
>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export type LogEvent = TypedEvent<[BigNumber], {log: BigNumber}>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string, number],
  {
    offerId: BigNumber;
    sender: string;
    blockTimestamp: BigNumber;
    amountAlice: BigNumber;
    amountBob: BigNumber;
    tokenAddress: string;
    offerType: number;
  }
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export type OfferCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber, number],
  {
    offerId: BigNumber;
    sender: string;
    blockTimestamp: BigNumber;
    offerType: number;
  }
>;

export type OfferCancelledEventFilter = TypedEventFilter<OfferCancelledEvent>;

export type OfferCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, MarsBaseCommon.MBOfferStructOutput],
  {
    offerId: BigNumber;
    sender: string;
    blockTimestamp: BigNumber;
    offer: MarsBaseCommon.MBOfferStructOutput;
  }
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export type OfferModifiedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    MarsBaseCommon.OfferParamsStructOutput,
    number
  ],
  {
    offerId: BigNumber;
    sender: string;
    blockTimestamp: BigNumber;
    offerParameters: MarsBaseCommon.OfferParamsStructOutput;
    offerType: number;
  }
>;

export type OfferModifiedEventFilter = TypedEventFilter<OfferModifiedEvent>;

export interface MarsBaseCommon extends BaseContract {
  contractName: "MarsBaseCommon";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarsBaseCommonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractType(
      offerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOfferType(
      amountAlice: BigNumberish,
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initOffer(
      nextOfferId: BigNumberish,
      tokenAlice: string,
      tokenBob: string[],
      amountAlice: BigNumberish,
      amountBob: BigNumberish[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;

    price(
      amountAlice: BigNumberish,
      offerAmountAlice: BigNumberish,
      offerAmountBob: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setOfferProperties(
      offer: MarsBaseCommon.MBOfferStruct,
      offerParams: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;
  };

  contractType(
    offerType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getOfferType(
    amountAlice: BigNumberish,
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  initOffer(
    nextOfferId: BigNumberish,
    tokenAlice: string,
    tokenBob: string[],
    amountAlice: BigNumberish,
    amountBob: BigNumberish[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  price(
    amountAlice: BigNumberish,
    offerAmountAlice: BigNumberish,
    offerAmountBob: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOfferProperties(
    offer: MarsBaseCommon.MBOfferStruct,
    offerParams: MarsBaseCommon.OfferParamsStruct,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  callStatic: {
    contractType(
      offerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getOfferType(
      amountAlice: BigNumberish,
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    initOffer(
      nextOfferId: BigNumberish,
      tokenAlice: string,
      tokenBob: string[],
      amountAlice: BigNumberish,
      amountBob: BigNumberish[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;

    price(
      amountAlice: BigNumberish,
      offerAmountAlice: BigNumberish,
      offerAmountBob: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOfferProperties(
      offer: MarsBaseCommon.MBOfferStruct,
      offerParams: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;
  };

  filters: {
    "BidCancelled(uint256,address,uint256)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): BidCancelledEventFilter;
    BidCancelled(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): BidCancelledEventFilter;

    "Log(uint256)"(log?: null): LogEventFilter;
    Log(log?: null): LogEventFilter;

    "OfferAccepted(uint256,address,uint256,uint256,uint256,address,uint8)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      amountAlice?: null,
      amountBob?: null,
      tokenAddress?: null,
      offerType?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      amountAlice?: null,
      amountBob?: null,
      tokenAddress?: null,
      offerType?: null
    ): OfferAcceptedEventFilter;

    "OfferCancelled(uint256,address,uint256,uint8)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerType?: null
    ): OfferCancelledEventFilter;
    OfferCancelled(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerType?: null
    ): OfferCancelledEventFilter;

    "OfferCreated(uint256,address,uint256,tuple)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offer?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offer?: null
    ): OfferCreatedEventFilter;

    "OfferModified(uint256,address,uint256,tuple,uint8)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerParameters?: null,
      offerType?: null
    ): OfferModifiedEventFilter;
    OfferModified(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerParameters?: null,
      offerType?: null
    ): OfferModifiedEventFilter;
  };

  estimateGas: {
    contractType(
      offerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferType(
      amountAlice: BigNumberish,
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initOffer(
      nextOfferId: BigNumberish,
      tokenAlice: string,
      tokenBob: string[],
      amountAlice: BigNumberish,
      amountBob: BigNumberish[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      amountAlice: BigNumberish,
      offerAmountAlice: BigNumberish,
      offerAmountBob: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOfferProperties(
      offer: MarsBaseCommon.MBOfferStruct,
      offerParams: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractType(
      offerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferType(
      amountAlice: BigNumberish,
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initOffer(
      nextOfferId: BigNumberish,
      tokenAlice: string,
      tokenBob: string[],
      amountAlice: BigNumberish,
      amountBob: BigNumberish[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      amountAlice: BigNumberish,
      offerAmountAlice: BigNumberish,
      offerAmountBob: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOfferProperties(
      offer: MarsBaseCommon.MBOfferStruct,
      offerParams: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
