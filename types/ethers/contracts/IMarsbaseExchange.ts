/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarsBaseCommon {
  export type OfferParamsStruct = {
    cancelEnabled: PromiseOrValue<boolean>;
    modifyEnabled: PromiseOrValue<boolean>;
    holdTokens: PromiseOrValue<boolean>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
  };

  export type OfferParamsStructOutput = [
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    cancelEnabled: boolean;
    modifyEnabled: boolean;
    holdTokens: boolean;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    deadline: BigNumber;
    minimumSize: BigNumber;
  };

  export type MBOfferStruct = {
    active: PromiseOrValue<boolean>;
    minimumMet: PromiseOrValue<boolean>;
    offerType: PromiseOrValue<BigNumberish>;
    offerId: PromiseOrValue<BigNumberish>;
    amountAlice: PromiseOrValue<BigNumberish>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    amountRemaining: PromiseOrValue<BigNumberish>;
    offerer: PromiseOrValue<string>;
    payoutAddress: PromiseOrValue<string>;
    tokenAlice: PromiseOrValue<string>;
    capabilities: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
    amountBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsAlice: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAddresses: PromiseOrValue<string>[];
    minimumOrderTokens: PromiseOrValue<string>[];
    tokenBob: PromiseOrValue<string>[];
  };

  export type MBOfferStructOutput = [
    boolean,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    [boolean, boolean, boolean],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    active: boolean;
    minimumMet: boolean;
    offerType: number;
    offerId: BigNumber;
    amountAlice: BigNumber;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    minimumSize: BigNumber;
    deadline: BigNumber;
    amountRemaining: BigNumber;
    offerer: string;
    payoutAddress: string;
    tokenAlice: string;
    capabilities: [boolean, boolean, boolean];
    amountBob: BigNumber[];
    minimumOrderAmountsAlice: BigNumber[];
    minimumOrderAmountsBob: BigNumber[];
    minimumOrderAddresses: string[];
    minimumOrderTokens: string[];
    tokenBob: string[];
  };
}

export interface IMarsbaseExchangeInterface extends utils.Interface {
  functions: {
    "acceptOffer(uint256,address,uint256)": FunctionFragment;
    "cancelBid(uint256)": FunctionFragment;
    "cancelExpiredOffers()": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelOffers(uint256,uint256)": FunctionFragment;
    "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getAllOffers()": FunctionFragment;
    "getMinimumFee()": FunctionFragment;
    "getNextOfferId()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "lockContract()": FunctionFragment;
    "migrateContract()": FunctionFragment;
    "price(uint256,uint256,uint256)": FunctionFragment;
    "setCommissionAddress(address)": FunctionFragment;
    "setExchangerAddress(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
    "setNextOfferId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "acceptOffer(uint256,address,uint256)"
      | "cancelBid"
      | "cancelBid(uint256)"
      | "cancelExpiredOffers"
      | "cancelExpiredOffers()"
      | "cancelOffer"
      | "cancelOffer(uint256)"
      | "cancelOffers"
      | "cancelOffers(uint256,uint256)"
      | "changeOfferParams"
      | "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"
      | "changeOwner"
      | "changeOwner(address)"
      | "createOffer"
      | "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"
      | "getAllOffers"
      | "getAllOffers()"
      | "getMinimumFee"
      | "getMinimumFee()"
      | "getNextOfferId"
      | "getNextOfferId()"
      | "getOffer"
      | "getOffer(uint256)"
      | "getOwner"
      | "getOwner()"
      | "lockContract"
      | "lockContract()"
      | "migrateContract"
      | "migrateContract()"
      | "price"
      | "price(uint256,uint256,uint256)"
      | "setCommissionAddress"
      | "setCommissionAddress(address)"
      | "setExchangerAddress"
      | "setExchangerAddress(address)"
      | "setMinimumFee"
      | "setMinimumFee(uint256)"
      | "setNextOfferId"
      | "setNextOfferId(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpiredOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpiredOffers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferParams",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "price(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangerAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextOfferId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextOfferId(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBid(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpiredOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpiredOffers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangerAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextOfferId(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMarsbaseExchange extends BaseContract {
  contractName: "IMarsbaseExchange";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarsbaseExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelBid(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelExpiredOffers(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelExpiredOffers()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOfferParams(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllOffers(
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput[]]>;

    "getAllOffers()"(
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput[]]>;

    getMinimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextOfferId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptOffer(uint256,address,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelBid(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelExpiredOffers(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelExpiredOffers()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffers(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffers(uint256,uint256)"(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOfferParams(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>[],
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>[],
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    tokenAlice: PromiseOrValue<string>,
    tokenBob: PromiseOrValue<string>[],
    amountAlice: PromiseOrValue<BigNumberish>,
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
    tokenAlice: PromiseOrValue<string>,
    tokenBob: PromiseOrValue<string>[],
    amountAlice: PromiseOrValue<BigNumberish>,
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllOffers(
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

  "getAllOffers()"(
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

  getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  "getOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  lockContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockContract()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateContract(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "migrateContract()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(
    amountAlice: PromiseOrValue<BigNumberish>,
    offerAmountAlice: PromiseOrValue<BigNumberish>,
    offerAmountBob: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "price(uint256,uint256,uint256)"(
    amountAlice: PromiseOrValue<BigNumberish>,
    offerAmountAlice: PromiseOrValue<BigNumberish>,
    offerAmountBob: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCommissionAddress(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCommissionAddress(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchangerAddress(
    exchangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setExchangerAddress(address)"(
    exchangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextOfferId(
    _nextOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setNextOfferId(uint256)"(
    _nextOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelBid(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExpiredOffers(overrides?: CallOverrides): Promise<void>;

    "cancelExpiredOffers()"(overrides?: CallOverrides): Promise<void>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOfferParams(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOffers(
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

    "getAllOffers()"(
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

    getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    lockContract(overrides?: CallOverrides): Promise<void>;

    "lockContract()"(overrides?: CallOverrides): Promise<void>;

    migrateContract(overrides?: CallOverrides): Promise<void>;

    "migrateContract()"(overrides?: CallOverrides): Promise<void>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelBid(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelExpiredOffers(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelExpiredOffers()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOfferParams(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllOffers(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllOffers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelBid(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelExpiredOffers(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelExpiredOffers()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOfferParams(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeOfferParams(uint256,address[],uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>[],
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllOffers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextOfferId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
