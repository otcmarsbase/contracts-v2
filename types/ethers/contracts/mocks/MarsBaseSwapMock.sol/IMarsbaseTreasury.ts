/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IMarsbaseTreasury {
  export type CouponStruct = {
    receiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
  };

  export type CouponStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    receiver: string;
    amount: BigNumber;
    nonce: BigNumber;
    chainId: BigNumber;
    contractAddress: string;
  };

  export type CouponSigStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type CouponSigStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface IMarsbaseTreasuryInterface extends utils.Interface {
  functions: {
    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "withdraw"
      | "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "withdraw",
    values: [IMarsbaseTreasury.CouponStruct, IMarsbaseTreasury.CouponSigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))",
    values: [IMarsbaseTreasury.CouponStruct, IMarsbaseTreasury.CouponSigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMarsbaseTreasury extends BaseContract {
  contractName: "IMarsbaseTreasury";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarsbaseTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  withdraw(
    coupon: IMarsbaseTreasury.CouponStruct,
    sig: IMarsbaseTreasury.CouponSigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
    coupon: IMarsbaseTreasury.CouponStruct,
    sig: IMarsbaseTreasury.CouponSigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
