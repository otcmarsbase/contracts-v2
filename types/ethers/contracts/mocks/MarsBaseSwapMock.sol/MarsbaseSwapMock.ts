/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IMarsbaseTreasury {
  export type CouponStruct = {
    receiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
  };

  export type CouponStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    receiver: string;
    amount: BigNumber;
    nonce: BigNumber;
    chainId: BigNumber;
    contractAddress: string;
  };

  export type CouponSigStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type CouponSigStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface MarsbaseSwapMockInterface extends utils.Interface {
  functions: {
    "couponHash(address,uint256,uint256)": FunctionFragment;
    "couponHash(address,uint256,uint256,uint256,address)": FunctionFragment;
    "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "factory()": FunctionFragment;
    "getCouponSigner()": FunctionFragment;
    "getTokenOut()": FunctionFragment;
    "liquidateToken(address,address,uint256,address)": FunctionFragment;
    "packCoupon(address,uint256,uint256,uint256,address)": FunctionFragment;
    "router()": FunctionFragment;
    "setCouponSigner(address)": FunctionFragment;
    "setTokenOut(address)": FunctionFragment;
    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "couponHash(address,uint256,uint256)"
      | "couponHash(address,uint256,uint256,uint256,address)"
      | "ecrecoverSigned"
      | "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"
      | "factory"
      | "factory()"
      | "getCouponSigner"
      | "getCouponSigner()"
      | "getTokenOut"
      | "getTokenOut()"
      | "liquidateToken"
      | "liquidateToken(address,address,uint256,address)"
      | "packCoupon"
      | "packCoupon(address,uint256,uint256,uint256,address)"
      | "router"
      | "router()"
      | "setCouponSigner"
      | "setCouponSigner(address)"
      | "setTokenOut"
      | "setTokenOut(address)"
      | "withdraw"
      | "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "couponHash(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "couponHash(address,uint256,uint256,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecrecoverSigned",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCouponSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponSigner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOut()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateToken(address,address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "packCoupon",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "packCoupon(address,uint256,uint256,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "router()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCouponSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCouponSigner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOut",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOut(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [IMarsbaseTreasury.CouponStruct, IMarsbaseTreasury.CouponSigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))",
    values: [IMarsbaseTreasury.CouponStruct, IMarsbaseTreasury.CouponSigStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "couponHash(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "couponHash(address,uint256,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecrecoverSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCouponSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponSigner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOut()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateToken(address,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "packCoupon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packCoupon(address,uint256,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCouponSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCouponSigner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOut(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))",
    data: BytesLike
  ): Result;

  events: {
    "Withdraw(address,address,uint256,uint256,uint256,address)": EventFragment;
    "liquidateTokenEvent(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Withdraw(address,address,uint256,uint256,uint256,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "liquidateTokenEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "liquidateTokenEvent(address,address,uint256,address)"
  ): EventFragment;
}

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  nonce: BigNumber;
  chainId: BigNumber;
  contractAddress: string;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface liquidateTokenEventEventObject {
  from: string;
  token: string;
  amount: BigNumber;
  receiver: string;
}
export type liquidateTokenEventEvent = TypedEvent<
  [string, string, BigNumber, string],
  liquidateTokenEventEventObject
>;

export type liquidateTokenEventEventFilter =
  TypedEventFilter<liquidateTokenEventEvent>;

export interface MarsbaseSwapMock extends BaseContract {
  contractName: "MarsbaseSwapMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarsbaseSwapMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "couponHash(address,uint256,uint256)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "couponHash(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ecrecoverSigned(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getCouponSigner(overrides?: CallOverrides): Promise<[string]>;

    "getCouponSigner()"(overrides?: CallOverrides): Promise<[string]>;

    getTokenOut(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenOut: string }>;

    "getTokenOut()"(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenOut: string }>;

    liquidateToken(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "liquidateToken(address,address,uint256,address)"(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    packCoupon(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "packCoupon(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setCouponSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCouponSigner(address)"(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenOut(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTokenOut(address)"(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "couponHash(address,uint256,uint256)"(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "couponHash(address,uint256,uint256,uint256,address)"(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ecrecoverSigned(
    msgHash: PromiseOrValue<BytesLike>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"(
    msgHash: PromiseOrValue<BytesLike>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getCouponSigner(overrides?: CallOverrides): Promise<string>;

  "getCouponSigner()"(overrides?: CallOverrides): Promise<string>;

  getTokenOut(overrides?: CallOverrides): Promise<string>;

  "getTokenOut()"(overrides?: CallOverrides): Promise<string>;

  liquidateToken(
    from: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "liquidateToken(address,address,uint256,address)"(
    from: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  packCoupon(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "packCoupon(address,uint256,uint256,uint256,address)"(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setCouponSigner(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCouponSigner(address)"(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenOut(
    tokenOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTokenOut(address)"(
    tokenOut: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    coupon: IMarsbaseTreasury.CouponStruct,
    sig: IMarsbaseTreasury.CouponSigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
    coupon: IMarsbaseTreasury.CouponStruct,
    sig: IMarsbaseTreasury.CouponSigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "couponHash(address,uint256,uint256)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "couponHash(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ecrecoverSigned(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getCouponSigner(overrides?: CallOverrides): Promise<string>;

    "getCouponSigner()"(overrides?: CallOverrides): Promise<string>;

    getTokenOut(overrides?: CallOverrides): Promise<string>;

    "getTokenOut()"(overrides?: CallOverrides): Promise<string>;

    liquidateToken(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateToken(address,address,uint256,address)"(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    packCoupon(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "packCoupon(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setCouponSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCouponSigner(address)"(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenOut(
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenOut(address)"(
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Withdraw(address,address,uint256,uint256,uint256,address)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      nonce?: null,
      chainId?: null,
      contractAddress?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      nonce?: null,
      chainId?: null,
      contractAddress?: null
    ): WithdrawEventFilter;

    "liquidateTokenEvent(address,address,uint256,address)"(
      from?: null,
      token?: null,
      amount?: null,
      receiver?: null
    ): liquidateTokenEventEventFilter;
    liquidateTokenEvent(
      from?: null,
      token?: null,
      amount?: null,
      receiver?: null
    ): liquidateTokenEventEventFilter;
  };

  estimateGas: {
    "couponHash(address,uint256,uint256)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "couponHash(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecrecoverSigned(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCouponSigner(overrides?: CallOverrides): Promise<BigNumber>;

    "getCouponSigner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenOut(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateToken(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "liquidateToken(address,address,uint256,address)"(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    packCoupon(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "packCoupon(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCouponSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCouponSigner(address)"(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenOut(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTokenOut(address)"(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "couponHash(address,uint256,uint256)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "couponHash(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecrecoverSigned(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ecrecoverSigned(bytes32,uint8,bytes32,bytes32)"(
      msgHash: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCouponSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCouponSigner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenOut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateToken(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateToken(address,address,uint256,address)"(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    packCoupon(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "packCoupon(address,uint256,uint256,uint256,address)"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCouponSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCouponSigner(address)"(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenOut(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenOut(address)"(
      tokenOut: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw((address,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))"(
      coupon: IMarsbaseTreasury.CouponStruct,
      sig: IMarsbaseTreasury.CouponSigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
