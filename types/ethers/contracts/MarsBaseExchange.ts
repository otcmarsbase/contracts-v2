/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarsBaseCommon {
  export type OfferParamsStruct = {
    cancelEnabled: PromiseOrValue<boolean>;
    modifyEnabled: PromiseOrValue<boolean>;
    holdTokens: PromiseOrValue<boolean>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
  };

  export type OfferParamsStructOutput = [
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    cancelEnabled: boolean;
    modifyEnabled: boolean;
    holdTokens: boolean;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    deadline: BigNumber;
    minimumSize: BigNumber;
  };

  export type MBOfferStruct = {
    active: PromiseOrValue<boolean>;
    minimumMet: PromiseOrValue<boolean>;
    offerType: PromiseOrValue<BigNumberish>;
    offerId: PromiseOrValue<BigNumberish>;
    amountAlice: PromiseOrValue<BigNumberish>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    amountRemaining: PromiseOrValue<BigNumberish>;
    offerer: PromiseOrValue<string>;
    payoutAddress: PromiseOrValue<string>;
    tokenAlice: PromiseOrValue<string>;
    capabilities: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
    amountBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsAlice: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAddresses: PromiseOrValue<string>[];
    minimumOrderTokens: PromiseOrValue<string>[];
    tokenBob: PromiseOrValue<string>[];
  };

  export type MBOfferStructOutput = [
    boolean,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    [boolean, boolean, boolean],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    active: boolean;
    minimumMet: boolean;
    offerType: number;
    offerId: BigNumber;
    amountAlice: BigNumber;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    minimumSize: BigNumber;
    deadline: BigNumber;
    amountRemaining: BigNumber;
    offerer: string;
    payoutAddress: string;
    tokenAlice: string;
    capabilities: [boolean, boolean, boolean];
    amountBob: BigNumber[];
    minimumOrderAmountsAlice: BigNumber[];
    minimumOrderAmountsBob: BigNumber[];
    minimumOrderAddresses: string[];
    minimumOrderTokens: string[];
    tokenBob: string[];
  };
}

export interface MarsBaseExchangeInterface extends utils.Interface {
  functions: {
    "_afterFee(uint256,uint256,uint256,uint256)": FunctionFragment;
    "acceptOffer(uint256,address,uint256)": FunctionFragment;
    "afterFee(uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelOffers(uint256,uint256)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "closeExpiredOffer(uint256)": FunctionFragment;
    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getAllOffers()": FunctionFragment;
    "getCommissionAddress()": FunctionFragment;
    "getExchangerAddress()": FunctionFragment;
    "getMinimumFee()": FunctionFragment;
    "getNextOfferId()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))": FunctionFragment;
    "limitMinimumSize9999(uint256,uint256)": FunctionFragment;
    "lockContract()": FunctionFragment;
    "log2(uint256)": FunctionFragment;
    "max(uint256,uint256)": FunctionFragment;
    "migrateContract()": FunctionFragment;
    "min(uint256,uint256)": FunctionFragment;
    "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "price(uint256,uint256,uint256)": FunctionFragment;
    "setCommissionAddress(address)": FunctionFragment;
    "setExchangerAddress(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
    "setNextOfferId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_afterFee"
      | "_afterFee(uint256,uint256,uint256,uint256)"
      | "acceptOffer"
      | "acceptOffer(uint256,address,uint256)"
      | "afterFee"
      | "afterFee(uint256,uint256)"
      | "cancelOffer"
      | "cancelOffer(uint256)"
      | "cancelOffers"
      | "cancelOffers(uint256,uint256)"
      | "changeOwner"
      | "changeOwner(address)"
      | "closeExpiredOffer"
      | "closeExpiredOffer(uint256)"
      | "createOffer"
      | "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"
      | "getAllOffers"
      | "getAllOffers()"
      | "getCommissionAddress"
      | "getCommissionAddress()"
      | "getExchangerAddress"
      | "getExchangerAddress()"
      | "getMinimumFee"
      | "getMinimumFee()"
      | "getNextOfferId"
      | "getNextOfferId()"
      | "getOffer"
      | "getOffer(uint256)"
      | "getOwner"
      | "getOwner()"
      | "isEligibleToPayout"
      | "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"
      | "limitMinimumSize9999"
      | "limitMinimumSize9999(uint256,uint256)"
      | "lockContract"
      | "lockContract()"
      | "log2"
      | "log2(uint256)"
      | "max"
      | "max(uint256,uint256)"
      | "migrateContract"
      | "migrateContract()"
      | "min"
      | "min(uint256,uint256)"
      | "minimumCovered"
      | "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"
      | "offers"
      | "offers(uint256)"
      | "price"
      | "price(uint256,uint256,uint256)"
      | "setCommissionAddress"
      | "setCommissionAddress(address)"
      | "setExchangerAddress"
      | "setExchangerAddress(address)"
      | "setMinimumFee"
      | "setMinimumFee(uint256)"
      | "setNextOfferId"
      | "setNextOfferId(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_afterFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_afterFee(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "afterFee(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeExpiredOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeExpiredOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      MarsBaseCommon.OfferParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangerAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextOfferId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleToPayout",
    values: [MarsBaseCommon.MBOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))",
    values: [MarsBaseCommon.MBOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "limitMinimumSize9999",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "limitMinimumSize9999(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "log2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "log2(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "max",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "max(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "min",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "min(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCovered",
    values: [MarsBaseCommon.MBOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))",
    values: [MarsBaseCommon.MBOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offers(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "price(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangerAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextOfferId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextOfferId(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_afterFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_afterFee(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterFee(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeExpiredOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeExpiredOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangerAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextOfferId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleToPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitMinimumSize9999",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitMinimumSize9999(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "log2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "log2(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "max(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "min(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offers(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangerAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextOfferId(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarsBaseExchange extends BaseContract {
  contractName: "MarsBaseExchange";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarsBaseExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    "_afterFee(uint256,uint256,uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    "afterFee(uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeExpiredOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closeExpiredOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllOffers(
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput[]]>;

    "getAllOffers()"(
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput[]]>;

    getCommissionAddress(overrides?: CallOverrides): Promise<[string]>;

    "getCommissionAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getExchangerAddress(overrides?: CallOverrides): Promise<[string]>;

    "getExchangerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getMinimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextOfferId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarsBaseCommon.MBOfferStructOutput]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    isEligibleToPayout(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { eligible: boolean }>;

    "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { eligible: boolean }>;

    limitMinimumSize9999(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "limitMinimumSize9999(uint256,uint256)"(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    log2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { n: number }>;

    "log2(uint256)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { n: number }>;

    max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "max(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "min(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumCovered(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        active: boolean;
        minimumMet: boolean;
        offerType: number;
        offerId: BigNumber;
        amountAlice: BigNumber;
        feeAlice: BigNumber;
        feeBob: BigNumber;
        smallestChunkSize: BigNumber;
        minimumSize: BigNumber;
        deadline: BigNumber;
        amountRemaining: BigNumber;
        offerer: string;
        payoutAddress: string;
        tokenAlice: string;
      }
    >;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        active: boolean;
        minimumMet: boolean;
        offerType: number;
        offerId: BigNumber;
        amountAlice: BigNumber;
        feeAlice: BigNumber;
        feeBob: BigNumber;
        smallestChunkSize: BigNumber;
        minimumSize: BigNumber;
        deadline: BigNumber;
        amountRemaining: BigNumber;
        offerer: string;
        payoutAddress: string;
        tokenAlice: string;
      }
    >;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _afterFee(
    amountBeforeFee: PromiseOrValue<BigNumberish>,
    feePercent: PromiseOrValue<BigNumberish>,
    scale: PromiseOrValue<BigNumberish>,
    safeAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
  >;

  "_afterFee(uint256,uint256,uint256,uint256)"(
    amountBeforeFee: PromiseOrValue<BigNumberish>,
    feePercent: PromiseOrValue<BigNumberish>,
    scale: PromiseOrValue<BigNumberish>,
    safeAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
  >;

  acceptOffer(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptOffer(uint256,address,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterFee(
    amountBeforeFee: PromiseOrValue<BigNumberish>,
    feePercent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
  >;

  "afterFee(uint256,uint256)"(
    amountBeforeFee: PromiseOrValue<BigNumberish>,
    feePercent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
  >;

  cancelOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffers(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffers(uint256,uint256)"(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeExpiredOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closeExpiredOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    tokenAlice: PromiseOrValue<string>,
    tokenBob: PromiseOrValue<string>[],
    amountAlice: PromiseOrValue<BigNumberish>,
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
    tokenAlice: PromiseOrValue<string>,
    tokenBob: PromiseOrValue<string>[],
    amountAlice: PromiseOrValue<BigNumberish>,
    amountBob: PromiseOrValue<BigNumberish>[],
    offerParameters: MarsBaseCommon.OfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllOffers(
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

  "getAllOffers()"(
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

  getCommissionAddress(overrides?: CallOverrides): Promise<string>;

  "getCommissionAddress()"(overrides?: CallOverrides): Promise<string>;

  getExchangerAddress(overrides?: CallOverrides): Promise<string>;

  "getExchangerAddress()"(overrides?: CallOverrides): Promise<string>;

  getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  "getOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarsBaseCommon.MBOfferStructOutput>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  isEligibleToPayout(
    offer: MarsBaseCommon.MBOfferStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
    offer: MarsBaseCommon.MBOfferStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  limitMinimumSize9999(
    minimumSize: PromiseOrValue<BigNumberish>,
    amountAlice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "limitMinimumSize9999(uint256,uint256)"(
    minimumSize: PromiseOrValue<BigNumberish>,
    amountAlice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockContract()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  log2(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "log2(uint256)"(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  max(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "max(uint256,uint256)"(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrateContract(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "migrateContract()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  min(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "min(uint256,uint256)"(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumCovered(
    offer: MarsBaseCommon.MBOfferStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
    offer: MarsBaseCommon.MBOfferStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      active: boolean;
      minimumMet: boolean;
      offerType: number;
      offerId: BigNumber;
      amountAlice: BigNumber;
      feeAlice: BigNumber;
      feeBob: BigNumber;
      smallestChunkSize: BigNumber;
      minimumSize: BigNumber;
      deadline: BigNumber;
      amountRemaining: BigNumber;
      offerer: string;
      payoutAddress: string;
      tokenAlice: string;
    }
  >;

  "offers(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      active: boolean;
      minimumMet: boolean;
      offerType: number;
      offerId: BigNumber;
      amountAlice: BigNumber;
      feeAlice: BigNumber;
      feeBob: BigNumber;
      smallestChunkSize: BigNumber;
      minimumSize: BigNumber;
      deadline: BigNumber;
      amountRemaining: BigNumber;
      offerer: string;
      payoutAddress: string;
      tokenAlice: string;
    }
  >;

  price(
    amountAlice: PromiseOrValue<BigNumberish>,
    offerAmountAlice: PromiseOrValue<BigNumberish>,
    offerAmountBob: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "price(uint256,uint256,uint256)"(
    amountAlice: PromiseOrValue<BigNumberish>,
    offerAmountAlice: PromiseOrValue<BigNumberish>,
    offerAmountBob: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCommissionAddress(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCommissionAddress(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchangerAddress(
    exchangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setExchangerAddress(address)"(
    exchangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextOfferId(
    _nextOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setNextOfferId(uint256)"(
    _nextOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    "_afterFee(uint256,uint256,uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    "afterFee(uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAfterFee: BigNumber; fee: BigNumber }
    >;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeExpiredOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeExpiredOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOffers(
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

    "getAllOffers()"(
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput[]>;

    getCommissionAddress(overrides?: CallOverrides): Promise<string>;

    "getCommissionAddress()"(overrides?: CallOverrides): Promise<string>;

    getExchangerAddress(overrides?: CallOverrides): Promise<string>;

    "getExchangerAddress()"(overrides?: CallOverrides): Promise<string>;

    getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarsBaseCommon.MBOfferStructOutput>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    isEligibleToPayout(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitMinimumSize9999(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "limitMinimumSize9999(uint256,uint256)"(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockContract(overrides?: CallOverrides): Promise<void>;

    "lockContract()"(overrides?: CallOverrides): Promise<void>;

    log2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "log2(uint256)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "max(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateContract(overrides?: CallOverrides): Promise<void>;

    "migrateContract()"(overrides?: CallOverrides): Promise<void>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "min(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCovered(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        active: boolean;
        minimumMet: boolean;
        offerType: number;
        offerId: BigNumber;
        amountAlice: BigNumber;
        feeAlice: BigNumber;
        feeBob: BigNumber;
        smallestChunkSize: BigNumber;
        minimumSize: BigNumber;
        deadline: BigNumber;
        amountRemaining: BigNumber;
        offerer: string;
        payoutAddress: string;
        tokenAlice: string;
      }
    >;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        active: boolean;
        minimumMet: boolean;
        offerType: number;
        offerId: BigNumber;
        amountAlice: BigNumber;
        feeAlice: BigNumber;
        feeBob: BigNumber;
        smallestChunkSize: BigNumber;
        minimumSize: BigNumber;
        deadline: BigNumber;
        amountRemaining: BigNumber;
        offerer: string;
        payoutAddress: string;
        tokenAlice: string;
      }
    >;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_afterFee(uint256,uint256,uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "afterFee(uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeExpiredOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closeExpiredOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllOffers(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllOffers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCommissionAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getCommissionAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getExchangerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEligibleToPayout(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitMinimumSize9999(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "limitMinimumSize9999(uint256,uint256)"(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    log2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "log2(uint256)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "max(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "min(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCovered(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_afterFee(uint256,uint256,uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      scale: PromiseOrValue<BigNumberish>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOffer(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterFee(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "afterFee(uint256,uint256)"(
      amountBeforeFee: PromiseOrValue<BigNumberish>,
      feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeExpiredOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closeExpiredOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createOffer(address,address[],uint256,uint256[],(bool,bool,bool,uint256,uint256,uint256,uint256,uint256))"(
      tokenAlice: PromiseOrValue<string>,
      tokenBob: PromiseOrValue<string>[],
      amountAlice: PromiseOrValue<BigNumberish>,
      amountBob: PromiseOrValue<BigNumberish>[],
      offerParameters: MarsBaseCommon.OfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllOffers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCommissionAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCommissionAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExchangerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextOfferId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEligibleToPayout(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEligibleToPayout((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitMinimumSize9999(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "limitMinimumSize9999(uint256,uint256)"(
      minimumSize: PromiseOrValue<BigNumberish>,
      amountAlice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    log2(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "log2(uint256)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "max(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateContract(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "migrateContract()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "min(uint256,uint256)"(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumCovered(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumCovered((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool[3],uint256[],uint256[],uint256[],address[],address[],address[]))"(
      offer: MarsBaseCommon.MBOfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "price(uint256,uint256,uint256)"(
      amountAlice: PromiseOrValue<BigNumberish>,
      offerAmountAlice: PromiseOrValue<BigNumberish>,
      offerAmountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchangerAddress(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setExchangerAddress(address)"(
      exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextOfferId(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setNextOfferId(uint256)"(
      _nextOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
