/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarsBaseCommon {
  export type MBOfferStruct = {
    active: PromiseOrValue<boolean>;
    minimumMet: PromiseOrValue<boolean>;
    offerType: PromiseOrValue<BigNumberish>;
    offerId: PromiseOrValue<BigNumberish>;
    amountAlice: PromiseOrValue<BigNumberish>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    amountRemaining: PromiseOrValue<BigNumberish>;
    offerer: PromiseOrValue<string>;
    payoutAddress: PromiseOrValue<string>;
    tokenAlice: PromiseOrValue<string>;
    capabilities: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
    amountBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsAlice: PromiseOrValue<BigNumberish>[];
    minimumOrderAmountsBob: PromiseOrValue<BigNumberish>[];
    minimumOrderAddresses: PromiseOrValue<string>[];
    minimumOrderTokens: PromiseOrValue<string>[];
    tokenBob: PromiseOrValue<string>[];
  };

  export type MBOfferStructOutput = [
    boolean,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    [boolean, boolean, boolean],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    active: boolean;
    minimumMet: boolean;
    offerType: number;
    offerId: BigNumber;
    amountAlice: BigNumber;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    minimumSize: BigNumber;
    deadline: BigNumber;
    amountRemaining: BigNumber;
    offerer: string;
    payoutAddress: string;
    tokenAlice: string;
    capabilities: [boolean, boolean, boolean];
    amountBob: BigNumber[];
    minimumOrderAmountsAlice: BigNumber[];
    minimumOrderAmountsBob: BigNumber[];
    minimumOrderAddresses: string[];
    minimumOrderTokens: string[];
    tokenBob: string[];
  };

  export type OfferParamsStruct = {
    cancelEnabled: PromiseOrValue<boolean>;
    modifyEnabled: PromiseOrValue<boolean>;
    holdTokens: PromiseOrValue<boolean>;
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    smallestChunkSize: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    minimumSize: PromiseOrValue<BigNumberish>;
  };

  export type OfferParamsStructOutput = [
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    cancelEnabled: boolean;
    modifyEnabled: boolean;
    holdTokens: boolean;
    feeAlice: BigNumber;
    feeBob: BigNumber;
    smallestChunkSize: BigNumber;
    deadline: BigNumber;
    minimumSize: BigNumber;
  };
}

export interface MarsBaseCommonInterface extends utils.Interface {
  functions: {};

  events: {
    "BidCancelled(uint256,address,uint256)": EventFragment;
    "ContractMigrated()": EventFragment;
    "Log(uint256)": EventFragment;
    "OfferAccepted(uint256,address,uint256,uint256,uint256,address,address,uint8,uint256,uint256)": EventFragment;
    "OfferCancelled(uint256,address,uint256)": EventFragment;
    "OfferClosed(uint256,uint8,uint256)": EventFragment;
    "OfferCreated(uint256,address,uint256,tuple)": EventFragment;
    "OfferModified(uint256,address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BidCancelled(uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractMigrated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferAccepted(uint256,address,uint256,uint256,uint256,address,address,uint8,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferCancelled(uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferClosed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferClosed(uint256,uint8,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferCreated(uint256,address,uint256,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferModified"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferModified(uint256,address,uint256,tuple)"
  ): EventFragment;
}

export interface BidCancelledEventObject {
  offerId: BigNumber;
  sender: string;
  blockTimestamp: BigNumber;
}
export type BidCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidCancelledEventObject
>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export interface ContractMigratedEventObject {}
export type ContractMigratedEvent = TypedEvent<[], ContractMigratedEventObject>;

export type ContractMigratedEventFilter =
  TypedEventFilter<ContractMigratedEvent>;

export interface LogEventObject {
  log: BigNumber;
}
export type LogEvent = TypedEvent<[BigNumber], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface OfferAcceptedEventObject {
  offerId: BigNumber;
  sender: string;
  blockTimestamp: BigNumber;
  amountAliceReceived: BigNumber;
  amountBobReceived: BigNumber;
  tokenAddressAlice: string;
  tokenAddressBob: string;
  offerType: number;
  feeAlice: BigNumber;
  feeBob: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    BigNumber
  ],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCancelledEventObject {
  offerId: BigNumber;
  sender: string;
  blockTimestamp: BigNumber;
}
export type OfferCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OfferCancelledEventObject
>;

export type OfferCancelledEventFilter = TypedEventFilter<OfferCancelledEvent>;

export interface OfferClosedEventObject {
  offerId: BigNumber;
  reason: number;
  blockTimestamp: BigNumber;
}
export type OfferClosedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  OfferClosedEventObject
>;

export type OfferClosedEventFilter = TypedEventFilter<OfferClosedEvent>;

export interface OfferCreatedEventObject {
  offerId: BigNumber;
  sender: string;
  blockTimestamp: BigNumber;
  offer: MarsBaseCommon.MBOfferStructOutput;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, MarsBaseCommon.MBOfferStructOutput],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferModifiedEventObject {
  offerId: BigNumber;
  sender: string;
  blockTimestamp: BigNumber;
  offerParameters: MarsBaseCommon.OfferParamsStructOutput;
}
export type OfferModifiedEvent = TypedEvent<
  [BigNumber, string, BigNumber, MarsBaseCommon.OfferParamsStructOutput],
  OfferModifiedEventObject
>;

export type OfferModifiedEventFilter = TypedEventFilter<OfferModifiedEvent>;

export interface MarsBaseCommon extends BaseContract {
  contractName: "MarsBaseCommon";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarsBaseCommonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BidCancelled(uint256,address,uint256)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): BidCancelledEventFilter;
    BidCancelled(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): BidCancelledEventFilter;

    "ContractMigrated()"(): ContractMigratedEventFilter;
    ContractMigrated(): ContractMigratedEventFilter;

    "Log(uint256)"(log?: null): LogEventFilter;
    Log(log?: null): LogEventFilter;

    "OfferAccepted(uint256,address,uint256,uint256,uint256,address,address,uint8,uint256,uint256)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      amountAliceReceived?: null,
      amountBobReceived?: null,
      tokenAddressAlice?: null,
      tokenAddressBob?: null,
      offerType?: null,
      feeAlice?: null,
      feeBob?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      amountAliceReceived?: null,
      amountBobReceived?: null,
      tokenAddressAlice?: null,
      tokenAddressBob?: null,
      offerType?: null,
      feeAlice?: null,
      feeBob?: null
    ): OfferAcceptedEventFilter;

    "OfferCancelled(uint256,address,uint256)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): OfferCancelledEventFilter;
    OfferCancelled(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null
    ): OfferCancelledEventFilter;

    "OfferClosed(uint256,uint8,uint256)"(
      offerId?: null,
      reason?: null,
      blockTimestamp?: null
    ): OfferClosedEventFilter;
    OfferClosed(
      offerId?: null,
      reason?: null,
      blockTimestamp?: null
    ): OfferClosedEventFilter;

    "OfferCreated(uint256,address,uint256,tuple)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offer?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offer?: null
    ): OfferCreatedEventFilter;

    "OfferModified(uint256,address,uint256,tuple)"(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerParameters?: null
    ): OfferModifiedEventFilter;
    OfferModified(
      offerId?: null,
      sender?: null,
      blockTimestamp?: null,
      offerParameters?: null
    ): OfferModifiedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
