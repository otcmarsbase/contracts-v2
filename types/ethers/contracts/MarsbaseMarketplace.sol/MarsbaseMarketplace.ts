/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMarsbaseMarketplace {
  export type BBOfferParamsStruct = {
    tokenAlice: PromiseOrValue<string>;
    amountAlice: PromiseOrValue<BigNumberish>;
    tokensBob: PromiseOrValue<string>[];
    feeAlice: PromiseOrValue<BigNumberish>;
    feeBob: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type BBOfferParamsStructOutput = [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenAlice: string;
    amountAlice: BigNumber;
    tokensBob: string[];
    feeAlice: BigNumber;
    feeBob: BigNumber;
    deadline: BigNumber;
  };

  export type BBOfferStruct = {
    active: PromiseOrValue<boolean>;
    id: PromiseOrValue<BigNumberish>;
    aliceAddress: PromiseOrValue<string>;
    params: IMarsbaseMarketplace.BBOfferParamsStruct;
    totalBidsCount: PromiseOrValue<BigNumberish>;
    activeBidsCount: PromiseOrValue<BigNumberish>;
  };

  export type BBOfferStructOutput = [
    boolean,
    BigNumber,
    string,
    IMarsbaseMarketplace.BBOfferParamsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    active: boolean;
    id: BigNumber;
    aliceAddress: string;
    params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
    totalBidsCount: BigNumber;
    activeBidsCount: BigNumber;
  };

  export type BBBidStruct = {
    offerId: PromiseOrValue<BigNumberish>;
    bidIdx: PromiseOrValue<BigNumberish>;
    bobAddress: PromiseOrValue<string>;
    tokenBob: PromiseOrValue<string>;
    amountBob: PromiseOrValue<BigNumberish>;
  };

  export type BBBidStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    offerId: BigNumber;
    bidIdx: BigNumber;
    bobAddress: string;
    tokenBob: string;
    amountBob: BigNumber;
  };
}

export interface MarsbaseMarketplaceInterface extends utils.Interface {
  functions: {
    "acceptBid(uint256,uint256,uint256)": FunctionFragment;
    "activeOffersCount()": FunctionFragment;
    "cancelBid(uint256,uint256)": FunctionFragment;
    "cancelBids(uint256,uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelOffers(uint256,uint256)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "commissionWallet()": FunctionFragment;
    "createBid(uint256,address,uint256)": FunctionFragment;
    "createOffer((address,uint256,address[],uint256,uint256,uint64))": FunctionFragment;
    "dumpEthToComissionWallet()": FunctionFragment;
    "extendDeadline(uint256,uint64)": FunctionFragment;
    "freePeriod()": FunctionFragment;
    "getActiveBidsForOffer(uint256)": FunctionFragment;
    "getActiveOffers()": FunctionFragment;
    "getBidId(uint256,uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "lifetimePrice(uint64,uint256)": FunctionFragment;
    "lockContract()": FunctionFragment;
    "locked()": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "nextOfferId()": FunctionFragment;
    "offerBids(bytes32)": FunctionFragment;
    "offerLifetimeSecondPrice()": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "setCommissionAddress(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBid"
      | "acceptBid(uint256,uint256,uint256)"
      | "activeOffersCount"
      | "activeOffersCount()"
      | "cancelBid"
      | "cancelBid(uint256,uint256)"
      | "cancelBids"
      | "cancelBids(uint256,uint256,uint256)"
      | "cancelOffer"
      | "cancelOffer(uint256)"
      | "cancelOffers"
      | "cancelOffers(uint256,uint256)"
      | "changeOwner"
      | "changeOwner(address)"
      | "commissionWallet"
      | "commissionWallet()"
      | "createBid"
      | "createBid(uint256,address,uint256)"
      | "createOffer"
      | "createOffer((address,uint256,address[],uint256,uint256,uint64))"
      | "dumpEthToComissionWallet"
      | "dumpEthToComissionWallet()"
      | "extendDeadline"
      | "extendDeadline(uint256,uint64)"
      | "freePeriod"
      | "freePeriod()"
      | "getActiveBidsForOffer"
      | "getActiveBidsForOffer(uint256)"
      | "getActiveOffers"
      | "getActiveOffers()"
      | "getBidId"
      | "getBidId(uint256,uint256)"
      | "getOffer"
      | "getOffer(uint256)"
      | "lifetimePrice"
      | "lifetimePrice(uint64,uint256)"
      | "lockContract"
      | "lockContract()"
      | "locked"
      | "locked()"
      | "minimumFee"
      | "minimumFee()"
      | "nextOfferId"
      | "nextOfferId()"
      | "offerBids"
      | "offerBids(bytes32)"
      | "offerLifetimeSecondPrice"
      | "offerLifetimeSecondPrice()"
      | "offers"
      | "offers(uint256)"
      | "owner"
      | "owner()"
      | "setCommissionAddress"
      | "setCommissionAddress(address)"
      | "setMinimumFee"
      | "setMinimumFee(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "activeOffersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeOffersCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBids",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBids(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commissionWallet()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [IMarsbaseMarketplace.BBOfferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer((address,uint256,address[],uint256,uint256,uint64))",
    values: [IMarsbaseMarketplace.BBOfferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dumpEthToComissionWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dumpEthToComissionWallet()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendDeadline",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendDeadline(uint256,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freePeriod()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBidsForOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBidsForOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveOffers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidId(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lifetimePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lifetimePrice(uint64,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOfferId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerBids",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerBids(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLifetimeSecondPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerLifetimeSecondPrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offers(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptBid(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeOffersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeOffersCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBid(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBids(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionWallet()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBid(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer((address,uint256,address[],uint256,uint256,uint64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dumpEthToComissionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dumpEthToComissionWallet()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendDeadline(uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freePeriod()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBidsForOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBidsForOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveOffers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBidId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidId(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lifetimePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lifetimePrice(uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOfferId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerBids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerBids(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLifetimeSecondPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLifetimeSecondPrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offers(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee(uint256)",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(uint256,address,uint256,tuple,tuple)": EventFragment;
    "BidCancelled(uint256,address,address,uint8,uint256,bytes32,tuple)": EventFragment;
    "BidCreated(uint256,address,address,uint256,bytes32,tuple)": EventFragment;
    "OfferClosed(uint256,address,uint8,tuple)": EventFragment;
    "OfferCreated(uint256,address,address,tuple)": EventFragment;
    "OfferExtended(uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BidAccepted(uint256,address,uint256,tuple,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BidCancelled(uint256,address,address,uint8,uint256,bytes32,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BidCreated(uint256,address,address,uint256,bytes32,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferClosed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferClosed(uint256,address,uint8,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferCreated(uint256,address,address,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferExtended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OfferExtended(uint256,uint64)"
  ): EventFragment;
}

export interface BidAcceptedEventObject {
  id: BigNumber;
  aliceAddress: string;
  bbOfferId: BigNumber;
  offer: IMarsbaseMarketplace.BBOfferStructOutput;
  bid: IMarsbaseMarketplace.BBBidStructOutput;
}
export type BidAcceptedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    IMarsbaseMarketplace.BBOfferStructOutput,
    IMarsbaseMarketplace.BBBidStructOutput
  ],
  BidAcceptedEventObject
>;

export type BidAcceptedEventFilter = TypedEventFilter<BidAcceptedEvent>;

export interface BidCancelledEventObject {
  offerId: BigNumber;
  bobAddress: string;
  tokenBob: string;
  reason: number;
  bidIdx: BigNumber;
  bidId: string;
  bid: IMarsbaseMarketplace.BBBidStructOutput;
}
export type BidCancelledEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    string,
    IMarsbaseMarketplace.BBBidStructOutput
  ],
  BidCancelledEventObject
>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export interface BidCreatedEventObject {
  offerId: BigNumber;
  bobAddress: string;
  tokenBob: string;
  bidIdx: BigNumber;
  bidId: string;
  bid: IMarsbaseMarketplace.BBBidStructOutput;
}
export type BidCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    IMarsbaseMarketplace.BBBidStructOutput
  ],
  BidCreatedEventObject
>;

export type BidCreatedEventFilter = TypedEventFilter<BidCreatedEvent>;

export interface OfferClosedEventObject {
  id: BigNumber;
  aliceAddress: string;
  reason: number;
  offer: IMarsbaseMarketplace.BBOfferStructOutput;
}
export type OfferClosedEvent = TypedEvent<
  [BigNumber, string, number, IMarsbaseMarketplace.BBOfferStructOutput],
  OfferClosedEventObject
>;

export type OfferClosedEventFilter = TypedEventFilter<OfferClosedEvent>;

export interface OfferCreatedEventObject {
  id: BigNumber;
  aliceAddress: string;
  tokenAlice: string;
  params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, string, string, IMarsbaseMarketplace.BBOfferParamsStructOutput],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferExtendedEventObject {
  offerId: BigNumber;
  deadline: BigNumber;
}
export type OfferExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OfferExtendedEventObject
>;

export type OfferExtendedEventFilter = TypedEventFilter<OfferExtendedEvent>;

export interface MarsbaseMarketplace extends BaseContract {
  contractName: "MarsbaseMarketplace";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarsbaseMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptBid(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activeOffersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "activeOffersCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelBid(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBids(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelBids(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commissionWallet(overrides?: CallOverrides): Promise<[string]>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<[string]>;

    createBid(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createBid(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createOffer((address,uint256,address[],uint256,uint256,uint64))"(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dumpEthToComissionWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dumpEthToComissionWallet()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendDeadline(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "extendDeadline(uint256,uint64)"(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "freePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActiveBidsForOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBBidStructOutput[]]>;

    "getActiveBidsForOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBBidStructOutput[]]>;

    getActiveOffers(
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBOfferStructOutput[]]>;

    "getActiveOffers()"(
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBOfferStructOutput[]]>;

    getBidId(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { bidId: string }>;

    "getBidId(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { bidId: string }>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBOfferStructOutput]>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarsbaseMarketplace.BBOfferStructOutput]>;

    lifetimePrice(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lifetimePrice(uint64,uint256)"(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    "locked()"(overrides?: CallOverrides): Promise<[boolean]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOfferId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextOfferId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    offerBids(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        offerId: BigNumber;
        bidIdx: BigNumber;
        bobAddress: string;
        tokenBob: string;
        amountBob: BigNumber;
      }
    >;

    "offerBids(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        offerId: BigNumber;
        bidIdx: BigNumber;
        bobAddress: string;
        tokenBob: string;
        amountBob: BigNumber;
      }
    >;

    offerLifetimeSecondPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "offerLifetimeSecondPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        IMarsbaseMarketplace.BBOfferParamsStructOutput,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        id: BigNumber;
        aliceAddress: string;
        params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
        totalBidsCount: BigNumber;
        activeBidsCount: BigNumber;
      }
    >;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        IMarsbaseMarketplace.BBOfferParamsStructOutput,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        id: BigNumber;
        aliceAddress: string;
        params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
        totalBidsCount: BigNumber;
        activeBidsCount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    bbOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptBid(uint256,uint256,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    bbOfferId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activeOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "activeOffersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelBid(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelBid(uint256,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBids(
    offerId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelBids(uint256,uint256,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffers(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOffers(uint256,uint256)"(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commissionWallet(overrides?: CallOverrides): Promise<string>;

  "commissionWallet()"(overrides?: CallOverrides): Promise<string>;

  createBid(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createBid(uint256,address,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    tokenBob: PromiseOrValue<string>,
    amountBob: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    offer: IMarsbaseMarketplace.BBOfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createOffer((address,uint256,address[],uint256,uint256,uint64))"(
    offer: IMarsbaseMarketplace.BBOfferParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dumpEthToComissionWallet(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dumpEthToComissionWallet()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendDeadline(
    offerId: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "extendDeadline(uint256,uint64)"(
    offerId: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "freePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getActiveBidsForOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBBidStructOutput[]>;

  "getActiveBidsForOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBBidStructOutput[]>;

  getActiveOffers(
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBOfferStructOutput[]>;

  "getActiveOffers()"(
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBOfferStructOutput[]>;

  getBidId(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBidId(uint256,uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    bidIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBOfferStructOutput>;

  "getOffer(uint256)"(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarsbaseMarketplace.BBOfferStructOutput>;

  lifetimePrice(
    deadline: PromiseOrValue<BigNumberish>,
    _now: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lifetimePrice(uint64,uint256)"(
    deadline: PromiseOrValue<BigNumberish>,
    _now: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockContract()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  "locked()"(overrides?: CallOverrides): Promise<boolean>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

  offerBids(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber] & {
      offerId: BigNumber;
      bidIdx: BigNumber;
      bobAddress: string;
      tokenBob: string;
      amountBob: BigNumber;
    }
  >;

  "offerBids(bytes32)"(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber] & {
      offerId: BigNumber;
      bidIdx: BigNumber;
      bobAddress: string;
      tokenBob: string;
      amountBob: BigNumber;
    }
  >;

  offerLifetimeSecondPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "offerLifetimeSecondPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      IMarsbaseMarketplace.BBOfferParamsStructOutput,
      BigNumber,
      BigNumber
    ] & {
      active: boolean;
      id: BigNumber;
      aliceAddress: string;
      params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
      totalBidsCount: BigNumber;
      activeBidsCount: BigNumber;
    }
  >;

  "offers(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      IMarsbaseMarketplace.BBOfferParamsStructOutput,
      BigNumber,
      BigNumber
    ] & {
      active: boolean;
      id: BigNumber;
      aliceAddress: string;
      params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
      totalBidsCount: BigNumber;
      activeBidsCount: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setCommissionAddress(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCommissionAddress(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    activeOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "activeOffersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelBid(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBids(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelBids(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    commissionWallet(overrides?: CallOverrides): Promise<string>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<string>;

    createBid(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createBid(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOffer((address,uint256,address[],uint256,uint256,uint64))"(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dumpEthToComissionWallet(overrides?: CallOverrides): Promise<void>;

    "dumpEthToComissionWallet()"(overrides?: CallOverrides): Promise<void>;

    extendDeadline(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "extendDeadline(uint256,uint64)"(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "freePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveBidsForOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBBidStructOutput[]>;

    "getActiveBidsForOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBBidStructOutput[]>;

    getActiveOffers(
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBOfferStructOutput[]>;

    "getActiveOffers()"(
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBOfferStructOutput[]>;

    getBidId(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBidId(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBOfferStructOutput>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarsbaseMarketplace.BBOfferStructOutput>;

    lifetimePrice(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lifetimePrice(uint64,uint256)"(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockContract(overrides?: CallOverrides): Promise<void>;

    "lockContract()"(overrides?: CallOverrides): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    "locked()"(overrides?: CallOverrides): Promise<boolean>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    offerBids(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        offerId: BigNumber;
        bidIdx: BigNumber;
        bobAddress: string;
        tokenBob: string;
        amountBob: BigNumber;
      }
    >;

    "offerBids(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        offerId: BigNumber;
        bidIdx: BigNumber;
        bobAddress: string;
        tokenBob: string;
        amountBob: BigNumber;
      }
    >;

    offerLifetimeSecondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "offerLifetimeSecondPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        IMarsbaseMarketplace.BBOfferParamsStructOutput,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        id: BigNumber;
        aliceAddress: string;
        params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
        totalBidsCount: BigNumber;
        activeBidsCount: BigNumber;
      }
    >;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        IMarsbaseMarketplace.BBOfferParamsStructOutput,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        id: BigNumber;
        aliceAddress: string;
        params: IMarsbaseMarketplace.BBOfferParamsStructOutput;
        totalBidsCount: BigNumber;
        activeBidsCount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BidAccepted(uint256,address,uint256,tuple,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      bbOfferId?: PromiseOrValue<BigNumberish> | null,
      offer?: null,
      bid?: null
    ): BidAcceptedEventFilter;
    BidAccepted(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      bbOfferId?: PromiseOrValue<BigNumberish> | null,
      offer?: null,
      bid?: null
    ): BidAcceptedEventFilter;

    "BidCancelled(uint256,address,address,uint8,uint256,bytes32,tuple)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      bobAddress?: PromiseOrValue<string> | null,
      tokenBob?: PromiseOrValue<string> | null,
      reason?: null,
      bidIdx?: null,
      bidId?: null,
      bid?: null
    ): BidCancelledEventFilter;
    BidCancelled(
      offerId?: PromiseOrValue<BigNumberish> | null,
      bobAddress?: PromiseOrValue<string> | null,
      tokenBob?: PromiseOrValue<string> | null,
      reason?: null,
      bidIdx?: null,
      bidId?: null,
      bid?: null
    ): BidCancelledEventFilter;

    "BidCreated(uint256,address,address,uint256,bytes32,tuple)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      bobAddress?: PromiseOrValue<string> | null,
      tokenBob?: PromiseOrValue<string> | null,
      bidIdx?: null,
      bidId?: null,
      bid?: null
    ): BidCreatedEventFilter;
    BidCreated(
      offerId?: PromiseOrValue<BigNumberish> | null,
      bobAddress?: PromiseOrValue<string> | null,
      tokenBob?: PromiseOrValue<string> | null,
      bidIdx?: null,
      bidId?: null,
      bid?: null
    ): BidCreatedEventFilter;

    "OfferClosed(uint256,address,uint8,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      reason?: PromiseOrValue<BigNumberish> | null,
      offer?: null
    ): OfferClosedEventFilter;
    OfferClosed(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      reason?: PromiseOrValue<BigNumberish> | null,
      offer?: null
    ): OfferClosedEventFilter;

    "OfferCreated(uint256,address,address,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      tokenAlice?: PromiseOrValue<string> | null,
      params?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      aliceAddress?: PromiseOrValue<string> | null,
      tokenAlice?: PromiseOrValue<string> | null,
      params?: null
    ): OfferCreatedEventFilter;

    "OfferExtended(uint256,uint64)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      deadline?: null
    ): OfferExtendedEventFilter;
    OfferExtended(
      offerId?: PromiseOrValue<BigNumberish> | null,
      deadline?: null
    ): OfferExtendedEventFilter;
  };

  estimateGas: {
    acceptBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptBid(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activeOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "activeOffersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelBid(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBids(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelBids(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commissionWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "commissionWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    createBid(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createBid(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createOffer((address,uint256,address[],uint256,uint256,uint64))"(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dumpEthToComissionWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dumpEthToComissionWallet()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendDeadline(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "extendDeadline(uint256,uint64)"(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "freePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveBidsForOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveBidsForOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveOffers(overrides?: CallOverrides): Promise<BigNumber>;

    "getActiveOffers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBidId(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBidId(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lifetimePrice(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lifetimePrice(uint64,uint256)"(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOfferId()"(overrides?: CallOverrides): Promise<BigNumber>;

    offerBids(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offerBids(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerLifetimeSecondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "offerLifetimeSecondPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptBid(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      bbOfferId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activeOffersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeOffersCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBid(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelBid(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBids(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelBids(uint256,uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffers(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOffers(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commissionWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commissionWallet()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBid(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createBid(uint256,address,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      tokenBob: PromiseOrValue<string>,
      amountBob: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createOffer((address,uint256,address[],uint256,uint256,uint64))"(
      offer: IMarsbaseMarketplace.BBOfferParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dumpEthToComissionWallet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dumpEthToComissionWallet()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendDeadline(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "extendDeadline(uint256,uint64)"(
      offerId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "freePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveBidsForOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActiveBidsForOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getActiveOffers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidId(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBidId(uint256,uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      bidIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lifetimePrice(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lifetimePrice(uint64,uint256)"(
      deadline: PromiseOrValue<BigNumberish>,
      _now: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockContract()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextOfferId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerBids(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offerBids(bytes32)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerLifetimeSecondPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offerLifetimeSecondPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommissionAddress(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCommissionAddress(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
