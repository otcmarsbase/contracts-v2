/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedBlackList = ContractEventLog<{
  _user: string;
  0: string;
}>;
export type DestroyedBlackFunds = ContractEventLog<{
  _blackListedUser: string;
  _balance: string;
  0: string;
  1: string;
}>;
export type RemovedBlackList = ContractEventLog<{
  _user: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface BlackList extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BlackList;
  clone(): BlackList;
  methods: {
    _totalSupply(): NonPayableTransactionObject<string>;

    addBlackList(_evilUser: string): NonPayableTransactionObject<void>;

    balanceOf(_owner: string): NonPayableTransactionObject<string>;

    balances(arg0: string): NonPayableTransactionObject<string>;

    basisPointsRate(): NonPayableTransactionObject<string>;

    destroyBlackFunds(
      _blackListedUser: string
    ): NonPayableTransactionObject<void>;

    getBlackListStatus(_maker: string): NonPayableTransactionObject<boolean>;

    getOwner(): NonPayableTransactionObject<string>;

    isBlackListed(arg0: string): NonPayableTransactionObject<boolean>;

    maximumFee(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeBlackList(_clearedUser: string): NonPayableTransactionObject<void>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    AddedBlackList(cb?: Callback<AddedBlackList>): EventEmitter;
    AddedBlackList(
      options?: EventOptions,
      cb?: Callback<AddedBlackList>
    ): EventEmitter;

    DestroyedBlackFunds(cb?: Callback<DestroyedBlackFunds>): EventEmitter;
    DestroyedBlackFunds(
      options?: EventOptions,
      cb?: Callback<DestroyedBlackFunds>
    ): EventEmitter;

    RemovedBlackList(cb?: Callback<RemovedBlackList>): EventEmitter;
    RemovedBlackList(
      options?: EventOptions,
      cb?: Callback<RemovedBlackList>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddedBlackList", cb: Callback<AddedBlackList>): void;
  once(
    event: "AddedBlackList",
    options: EventOptions,
    cb: Callback<AddedBlackList>
  ): void;

  once(event: "DestroyedBlackFunds", cb: Callback<DestroyedBlackFunds>): void;
  once(
    event: "DestroyedBlackFunds",
    options: EventOptions,
    cb: Callback<DestroyedBlackFunds>
  ): void;

  once(event: "RemovedBlackList", cb: Callback<RemovedBlackList>): void;
  once(
    event: "RemovedBlackList",
    options: EventOptions,
    cb: Callback<RemovedBlackList>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
