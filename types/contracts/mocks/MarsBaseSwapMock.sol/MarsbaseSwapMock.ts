/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Withdraw = ContractEventLog<{
  sender: string;
  receiver: string;
  amount: string;
  nonce: string;
  chainId: string;
  contractAddress: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type liquidateTokenEvent = ContractEventLog<{
  from: string;
  token: string;
  amount: string;
  receiver: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface MarsbaseSwapMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MarsbaseSwapMock;
  clone(): MarsbaseSwapMock;
  methods: {
    "couponHash(address,uint256,uint256)"(
      receiver: string,
      amount: number | string | BN,
      nonce: number | string | BN
    ): NonPayableTransactionObject<string>;

    "couponHash(address,uint256,uint256,uint256,address)"(
      receiver: string,
      amount: number | string | BN,
      nonce: number | string | BN,
      chainId: number | string | BN,
      contractAddress: string
    ): NonPayableTransactionObject<string>;

    ecrecoverSigned(
      msgHash: string | number[],
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<string>;

    factory(): NonPayableTransactionObject<string>;

    getCouponSigner(): NonPayableTransactionObject<string>;

    getTokenOut(): NonPayableTransactionObject<string>;

    liquidateToken(
      from: string,
      token: string,
      amount: number | string | BN,
      receiver: string
    ): NonPayableTransactionObject<void>;

    packCoupon(
      receiver: string,
      amount: number | string | BN,
      nonce: number | string | BN,
      chainId: number | string | BN,
      contractAddress: string
    ): NonPayableTransactionObject<string>;

    router(): NonPayableTransactionObject<string>;

    setCouponSigner(_signer: string): NonPayableTransactionObject<void>;

    setTokenOut(tokenOut: string): NonPayableTransactionObject<void>;

    withdraw(
      coupon: [
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string
      ],
      sig: [number | string | BN, string | number[], string | number[]]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    liquidateTokenEvent(cb?: Callback<liquidateTokenEvent>): EventEmitter;
    liquidateTokenEvent(
      options?: EventOptions,
      cb?: Callback<liquidateTokenEvent>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;

  once(event: "liquidateTokenEvent", cb: Callback<liquidateTokenEvent>): void;
  once(
    event: "liquidateTokenEvent",
    options: EventOptions,
    cb: Callback<liquidateTokenEvent>
  ): void;
}
